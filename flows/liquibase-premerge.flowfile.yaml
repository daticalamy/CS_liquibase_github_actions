globalVariables:
  TAG: ${LB_TAG}
  CLONED_URL: ${LB_CLONED_URL}
  
stages:

  # Validate changes
  Validation:
    actions: 
      - type: liquibase
        command: validate

  Status:
    actions:
      - type: liquibase
        command: status
        cmdArgs: {verbose: true}

      - type: control
        if: "status.changesetCount == 0"
        command: exit
        cmdArgs: {exitCode: 0, exitMessage: "Exiting with an error status of 0 because the database is up-to-date"}

  Checks-Changelog:
    actions:
      - type: liquibase
        command: checks run
        cmdArgs: {checks-scope: changelog, changeset-filter: "PENDING"}
        globalArgs: { reports-name: "checks-report-premerge-changelog.html"}

  Update-SQL:
    actions:
      - type: liquibase
        command: update-sql

  # Deploy to ephemeral database
  Tag-and-Deploy-to-EphemeralDB:
    actions:
      - type: liquibase
        command: tag
        cmdArgs: { URL: "${CLONED_URL}", tag: "${TAG}" }
        
      # Run the update (with testing rollback)
      - type: liquibase
        command: update-testing-rollback
        cmdArgs: { URL: "${CLONED_URL}", reports-name: "clone-report.html" }              
        
  # Deploy to ephemeral database
  # Deploy-to-EphemeralDB:
    # actions:
      # - type: liquibase
        # command: flow
        # cmdArgs: {flowFile: "clone-sqlserver.yaml"}
      
      Update SQL
      # - type: liquibase
        # command: updateSQL
        # cmdArgs: { URL: "${CLONED_URL}", USERNAME: "${CLONED_UID}", PASSWORD: "${CLONED_PW}", labels: "${Labels}" }
        
      Tag the database 
      # - type: liquibase
        # command: tag
        # cmdArgs: { tag: "${TAG}", URL: "${CLONED_URL}", USERNAME: "${CLONED_UID}", PASSWORD: "${CLONED_PW}" }

      Run the update (with testing rollback)
      # - type: liquibase
        # command: update-testing-rollback
        # cmdArgs: { URL: "${CLONED_URL}", USERNAME: "${CLONED_UID}", PASSWORD: "${CLONED_PW}", reports-name: "clone-report.html" }       
        
endStage:
  actions:
    - type: liquibase
      command: history
      cmdArgs: { URL: "${CLONED_URL}" }