##########           LIQUIBASE FLOWFILE                ##########
##########  learn more http://docs.liquibase.com/flow  ##########

globalVariables:
  ENV: ${ENVIRONMENT}
  CONTAINER: ${AZURE_CONTAINER} 
  TAG: ${LB_TAG}
  CHECK_DRIFT: ${LB_CHECK_DRIFT}
  SCHEMAS: ${LB_SCHEMAS}

stages:

  Drift-Detection:
    # Check if manual updates were made to the environment since last deployment
    actions:
      - type: shell
        if: "${CHECK_DRIFT} == true"
        command: liquibase --search-path=az://${CONTAINER}/gh_sqlserver_snapshots/ diff --reference-url=offline:mssql?snapshot=${ENV}-snapshot.json --report-name="drift-report-${ENV}.html" --reports-enabled=true --drift-severity=1 --schemas=${SCHEMAS} --diff-types=columns,foreignkeys,indexes,primarykeys,tables,uniqueconstraints,views,checkconstraints,triggers

    # actions:
      # - type: liquibase
        # if: "${CHECK_DRIFT} == true"
        # command: diff
        # cmdArgs: { schemas: "${SCHEMAS}", drift-severity: "1", reference-url: "offline:mssql?snapshot=${ENV}-snapshot.json" }
        # globalArgs: { reports-name: "drift-report-${ENV}.html", search-path: "s3://${BUCKET}/gh_sqlserver_snapshots/" }
          
  Validation:
    actions: 
      - type: liquibase
        command: validate

  Status:
    actions:
      - type: liquibase
        command: status
        cmdArgs: {verbose: true}
        
      - type: control
        if: "status.changesetCount == 0"
        command: exit
        cmdArgs: {exitCode: 0, exitMessage: "Exiting with an error status of 0 because the database is up-to-date"}

  # Checks-Changelog:
    # actions:
      # - type: liquibase
        # command: checks run
        # cmdArgs: {checks-scope: changelog, changeset-filter: "PENDING"}
        # globalArgs: { reports-name: "checks-report-deploy-${ENV}-changelog.html" }

  Update-SQL:
    actions:
      - type: liquibase
        command: update-sql
        globalArgs: { reports-name: "sql-deploy-report-${ENV}.html" }

  Tag:
    actions:
      - type: liquibase
        command: tag
        cmdArgs: {tag: "${TAG}"}

  Update:
    actions:
      - type: liquibase
        command: update
        globalArgs: { reports-name: "deploy-report-${ENV}.html" }

  Checks-Database:
    actions:
      - type: liquibase
        command: checks run
        cmdArgs: {checks-scope: database}
        globalArgs: { reports-name: "checks-report-deploy-${ENV}-database.html" }

## The endStage ALWAYS RUNS. 
## So put actions here which you desire to perform whether previous stages' actions succeed or fail.
## If you do not want any actions to ALWAYS RUN, simply delete the endStage from your flow file.

endStage:
  actions:
    - type: liquibase
      command: snapshot
      cmdArgs: {  snapshot-format: json, schemas: "${SCHEMAS}", snapshot-filters: "column,foreignkey,index,primarykey,table,uniqueconstraint,view,checkconstraint,trigger"}
      globalArgs: { output-file: 'az://${CONTAINER}/gh_sqlserver_snapshots/${ENV}-snapshot.json' }
        
    - type: shell
      command: echo 'Updated snapshot saved to az://${CONTAINER}/gh_sqlserver_snapshots/${ENV}-snapshot.json'  
  
    - type: liquibase
      command: history